// <auto-generated />
using System;
using BackendApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251015023546_testDB")]
    partial class testDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackendApi.Core.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("CalculatedGrade")
                        .HasColumnType("float");

                    b.Property<double?>("MainGrade")
                        .HasColumnType("float");

                    b.Property<int>("StudentSubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentSubjectId")
                        .IsUnique();

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("BackendApi.Core.GradeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.ToTable("GradeItems");
                });

            modelBuilder.Entity("BackendApi.Core.Models.AcademicPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EndYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AcademicPeriods");
                });

            modelBuilder.Entity("BackendApi.Core.Models.ClassStandingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FinalsGradeId")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MidtermGradeId")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinalsGradeId");

                    b.HasIndex("MidtermGradeId");

                    b.ToTable("ClassStanding");
                });

            modelBuilder.Entity("BackendApi.Core.Models.Dto.UserEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EventDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserEvents");
                });

            modelBuilder.Entity("BackendApi.Core.Models.FinalsGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicPeriodId")
                        .HasColumnType("int");

                    b.Property<string>("AcademicYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttendanceScore")
                        .HasColumnType("int");

                    b.Property<decimal>("ClassStandingAverage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ClassStandingPG")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClassStandingTotalScore")
                        .HasColumnType("int");

                    b.Property<decimal>("ClassStandingWeightedTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CombinedFinalsAverage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FinalsPG")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FinalsScore")
                        .HasColumnType("int");

                    b.Property<int>("FinalsTotal")
                        .HasColumnType("int");

                    b.Property<decimal>("FinalsWeightedTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("GradePointEquivalent")
                        .HasColumnType("float");

                    b.Property<decimal>("OverallFinals")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProjectPG")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProjectScore")
                        .HasColumnType("int");

                    b.Property<decimal>("ProjectWeightedTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuizPG")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuizWeightedTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RecitationScore")
                        .HasColumnType("int");

                    b.Property<decimal>("SEPPG")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SEPScore")
                        .HasColumnType("int");

                    b.Property<decimal>("SEPWeightedTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Semester")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<double>("TotalFinalsGrade")
                        .HasColumnType("float");

                    b.Property<double>("TotalFinalsGradeRounded")
                        .HasColumnType("float");

                    b.Property<int>("TotalQuizScore")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalScoreFinals")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicPeriodId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("FinalsGrades");
                });

            modelBuilder.Entity("BackendApi.Core.Models.GradePointEquivalent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("GradePoint")
                        .HasColumnType("float");

                    b.Property<double>("MaxPercentage")
                        .HasColumnType("float");

                    b.Property<double?>("MinPercentage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("GradePointEquivalents");
                });

            modelBuilder.Entity("BackendApi.Core.Models.GradeWeights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ClassStandingWeighted")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MidtermWeighted")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProjectWeighted")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuizWeighted")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SEPWeighted")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("GradeWeights");
                });

            modelBuilder.Entity("BackendApi.Core.Models.MidtermGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicPeriodId")
                        .HasColumnType("int");

                    b.Property<string>("AcademicYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttendanceScore")
                        .HasColumnType("int");

                    b.Property<decimal>("ClassStandingAverage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ClassStandingPG")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClassStandingTotalScore")
                        .HasColumnType("int");

                    b.Property<decimal>("ClassStandingWeightedTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CombinedPrelimMidtermAverage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("GradePointEquivalent")
                        .HasColumnType("float");

                    b.Property<decimal>("MidtermPG")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MidtermScore")
                        .HasColumnType("int");

                    b.Property<int>("MidtermTotal")
                        .HasColumnType("int");

                    b.Property<decimal>("MidtermWeightedTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OverallPrelimAndMidterm")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PrelimScore")
                        .HasColumnType("int");

                    b.Property<int>("PrelimTotal")
                        .HasColumnType("int");

                    b.Property<decimal>("ProjectPG")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProjectScore")
                        .HasColumnType("int");

                    b.Property<decimal>("ProjectWeightedTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuizPG")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuizWeightedTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RecitationScore")
                        .HasColumnType("int");

                    b.Property<decimal>("SEPPG")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SEPScore")
                        .HasColumnType("int");

                    b.Property<decimal>("SEPWeightedTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Semester")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<double>("TotalMidtermGrade")
                        .HasColumnType("float");

                    b.Property<double>("TotalMidtermGradeRounded")
                        .HasColumnType("float");

                    b.Property<int>("TotalQuizScore")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalScorePerlimAndMidterm")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicPeriodId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("MidtermGrades");
                });

            modelBuilder.Entity("BackendApi.Core.Models.QuizList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FinalsGradeId")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MidtermGradeId")
                        .HasColumnType("int");

                    b.Property<int?>("QuizScore")
                        .HasColumnType("int");

                    b.Property<int?>("TotalQuizScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinalsGradeId");

                    b.HasIndex("MidtermGradeId");

                    b.ToTable("QuizLists");
                });

            modelBuilder.Entity("BackendApi.Core.Models.StudentEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicPeriodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnrolled")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcademicPeriodId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentEnrollments");
                });

            modelBuilder.Entity("BackendApi.Core.Models.StudentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatestTransaction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("YearLevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackendApi.Core.Models.StudentSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentID");

                    b.HasIndex("SubjectID");

                    b.ToTable("StudentSubjects");
                });

            modelBuilder.Entity("BackendApi.Core.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("BackendApi.Core.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("BackendApi.Core.Grade", b =>
                {
                    b.HasOne("BackendApi.Core.Models.StudentSubject", "StudentSubject")
                        .WithOne("Grade")
                        .HasForeignKey("BackendApi.Core.Grade", "StudentSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentSubject");
                });

            modelBuilder.Entity("BackendApi.Core.GradeItem", b =>
                {
                    b.HasOne("BackendApi.Core.Grade", "Grade")
                        .WithMany("GradeItems")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("BackendApi.Core.Models.ClassStandingItem", b =>
                {
                    b.HasOne("BackendApi.Core.Models.FinalsGrade", null)
                        .WithMany("ClassStandingItems")
                        .HasForeignKey("FinalsGradeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendApi.Core.Models.MidtermGrade", null)
                        .WithMany("ClassStandingItems")
                        .HasForeignKey("MidtermGradeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BackendApi.Core.Models.Dto.UserEvent", b =>
                {
                    b.HasOne("BackendApi.Core.Models.StudentModel", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendApi.Core.Models.FinalsGrade", b =>
                {
                    b.HasOne("BackendApi.Core.Models.AcademicPeriod", "AcademicPeriod")
                        .WithMany()
                        .HasForeignKey("AcademicPeriodId");

                    b.HasOne("BackendApi.Core.Models.StudentModel", "User")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendApi.Core.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.Navigation("AcademicPeriod");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendApi.Core.Models.MidtermGrade", b =>
                {
                    b.HasOne("BackendApi.Core.Models.AcademicPeriod", "AcademicPeriod")
                        .WithMany()
                        .HasForeignKey("AcademicPeriodId");

                    b.HasOne("BackendApi.Core.Models.StudentModel", "User")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendApi.Core.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.Navigation("AcademicPeriod");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendApi.Core.Models.QuizList", b =>
                {
                    b.HasOne("BackendApi.Core.Models.FinalsGrade", null)
                        .WithMany("Quizzes")
                        .HasForeignKey("FinalsGradeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendApi.Core.Models.MidtermGrade", null)
                        .WithMany("Quizzes")
                        .HasForeignKey("MidtermGradeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BackendApi.Core.Models.StudentEnrollment", b =>
                {
                    b.HasOne("BackendApi.Core.Models.AcademicPeriod", "AcademicPeriod")
                        .WithMany()
                        .HasForeignKey("AcademicPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendApi.Core.Models.StudentModel", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicPeriod");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BackendApi.Core.Models.StudentSubject", b =>
                {
                    b.HasOne("BackendApi.Core.Models.StudentModel", "User")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendApi.Core.Models.Subject", "Subject")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendApi.Core.Models.Subject", b =>
                {
                    b.HasOne("BackendApi.Core.Models.Teacher", "Teacher")
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BackendApi.Core.Models.Teacher", b =>
                {
                    b.HasOne("BackendApi.Core.Models.StudentModel", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendApi.Core.Grade", b =>
                {
                    b.Navigation("GradeItems");
                });

            modelBuilder.Entity("BackendApi.Core.Models.FinalsGrade", b =>
                {
                    b.Navigation("ClassStandingItems");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("BackendApi.Core.Models.MidtermGrade", b =>
                {
                    b.Navigation("ClassStandingItems");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("BackendApi.Core.Models.StudentModel", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("StudentSubjects");

                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("BackendApi.Core.Models.StudentSubject", b =>
                {
                    b.Navigation("Grade");
                });

            modelBuilder.Entity("BackendApi.Core.Models.Subject", b =>
                {
                    b.Navigation("StudentSubjects");
                });

            modelBuilder.Entity("BackendApi.Core.Models.Teacher", b =>
                {
                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
